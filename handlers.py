from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import start_kb
from db import add_application, get_all_applications
from config import ADMIN_ID

router = Router()

class Form(StatesGroup):
    name = State()
    phone = State()
    email = State()
    comment = State()

def register_handlers(dp):
    dp.include_router(router)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É. –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", reply_markup=start_kb())
    await state.set_state(Form.name)

@router.message(StateFilter(Form.name))
async def form_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@router.message(StateFilter(Form.phone))
async def form_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")
    await state.set_state(Form.email)

@router.message(StateFilter(Form.email))
async def form_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(Form.comment)

@router.message(StateFilter(Form.comment))
async def form_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    phone = data["phone"]
    email = data["email"]
    comment = message.text

    await add_application(name, phone, email, comment)

    text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
        f"<b>–ò–º—è:</b> {name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>Email:</b> {email}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await message.bot.send_message(ADMIN_ID, text)

    await state.clear()

@router.message(Command("showall"))
async def show_all_applications(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    rows = await get_all_applications()
    if not rows:
        await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "\n\n".join([
        f"üßæ <b>ID:</b> {r[0]}\n<b>–ò–º—è:</b> {r[1]}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {r[2]}\n<b>Email:</b> {r[3]}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {r[4]}"
        for r in rows
    ])

    await message.answer(text)
